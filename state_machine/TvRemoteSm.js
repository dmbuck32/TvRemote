// Autogenerated with StateSmith 0.9.10-alpha+1f83cb59adcabe0a5a4c8d3e0421027761c28974.
// Algorithm: Balanced1. See https://github.com/StateSmith/StateSmith/wiki/Algorithms

// Constants used by the code.
const MAX_BRIGHTNESS = 100;
const MIN_BRIGHTNESS = 0;
const MAX_VOLUME = 100;
const MIN_VOLUME = 0;
const MAX_CHANNEL = 256;
const MIN_CHANNEL = 1;


// Generated state machine
class TvRemoteSm
{
    static EventId = 
    {
        B1_LONG_PRESS : 0,
        B1_PRESS : 1,
        B2_LONG_PRESS : 2,
        B2_PRESS : 3,
    }
    static { Object.freeze(this.EventId); }
    
    static EventIdCount = 4;
    static { Object.freeze(this.EventIdCount); }
    
    static StateId = 
    {
        ROOT : 0,
        TV_OFF : 1,
        TV_ON : 2,
        BRIGHTNESS_CHANGE : 3,
        BRIGHTNESS_CHANGE__INITIAL : 4,
        BRIGHTNESS_DOWN : 5,
        BRIGHTNESS_UP : 6,
        CHANNEL_SELECT : 7,
        CHANNEL_DOWN : 8,
        CHANNEL_SELECT__INITIAL : 9,
        CHANNEL_UP : 10,
        VOLUME_CHANGE : 11,
        VOLUME_CHANGE__INITIAL : 12,
        VOLUME_DOWN : 13,
        VOLUME_UP : 14,
    }
    static { Object.freeze(this.StateId); }
    
    static StateIdCount = 15;
    static { Object.freeze(this.StateIdCount); }
    
    // Used internally by state machine. Feel free to inspect, but don't modify.
    stateId;
    
    // Used internally by state machine. Don't modify.
    #ancestorEventHandler;
    
    // Used internally by state machine. Don't modify.
    #currentEventHandlers = Array(TvRemoteSm.EventIdCount).fill(undefined);
    
    // Used internally by state machine. Don't modify.
    #currentStateExitHandler;
    
    // Variables. Can be used for inputs, outputs, user variables...
    vars = {
        volume: 50,     
        brightness: 50,   
        channel: 1,
    };
    
    // Starts the state machine. Must be called before dispatching events. Not thread safe.
    start()
    {
        this.#ROOT_enter();
        // ROOT behavior
        // uml: TransitionTo(ROOT.<InitialState>)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `ROOT.<InitialState>`.
            // ROOT.<InitialState> is a pseudo state and cannot have an `enter` trigger.
            
            // ROOT.<InitialState> behavior
            // uml: TransitionTo(TV_OFF)
            {
                // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: ``.
                
                // Step 3: Enter/move towards transition target `TV_OFF`.
                this.#TV_OFF_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                this.stateId = TvRemoteSm.StateId.TV_OFF;
                // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
                return;
            } // end of behavior for ROOT.<InitialState>
        } // end of behavior for ROOT
    }
    
    // Dispatches an event to the state machine. Not thread safe.
    dispatchEvent(eventId)
    {
        let behaviorFunc = this.#currentEventHandlers[eventId];
        
        while (behaviorFunc != null)
        {
            this.#ancestorEventHandler = null;
            behaviorFunc.call(this);
            behaviorFunc = this.#ancestorEventHandler;
        }
    }
    
    // This function is used when StateSmith doesn't know what the active leaf state is at
    // compile time due to sub states or when multiple states need to be exited.
    #exitUpToStateHandler(desiredStateExitHandler)
    {
        while (this.#currentStateExitHandler != desiredStateExitHandler)
        {
            this.#currentStateExitHandler.call(this);
        }
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ROOT
    ////////////////////////////////////////////////////////////////////////////////
    
    #ROOT_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#ROOT_exit;
    }
    
    #ROOT_exit()
    {
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TV_OFF
    ////////////////////////////////////////////////////////////////////////////////
    
    #TV_OFF_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#TV_OFF_exit;
        this.#currentEventHandlers[TvRemoteSm.EventId.B1_LONG_PRESS] = this.#TV_OFF_b1_long_press;
        
        // TV_OFF behavior
        // uml: enter / { show("TV OFF"); }
        {
            // Step 1: execute action `show("TV OFF");`
            console.log("TV OFF");
        } // end of behavior for TV_OFF
    }
    
    #TV_OFF_exit()
    {
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#ROOT_exit;
        this.#currentEventHandlers[TvRemoteSm.EventId.B1_LONG_PRESS] = null;  // no ancestor listens to this event
    }
    
    #TV_OFF_b1_long_press()
    {
        // No ancestor state handles `b1_long_press` event.
        
        // TV_OFF behavior
        // uml: B1_LONG_PRESS TransitionTo(TV_ON)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.#TV_OFF_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `TV_ON`.
            this.#TV_ON_enter();
            
            // TV_ON.<InitialState> behavior
            // uml: TransitionTo(VOLUME_CHANGE)
            {
                // Step 1: Exit states until we reach `TV_ON` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: ``.
                
                // Step 3: Enter/move towards transition target `VOLUME_CHANGE`.
                this.#VOLUME_CHANGE_enter();
                
                // Finish transition by calling pseudo state transition function.
                this.#VOLUME_CHANGE_InitialState_transition();
                return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
            } // end of behavior for TV_ON.<InitialState>
        } // end of behavior for TV_OFF
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TV_ON
    ////////////////////////////////////////////////////////////////////////////////
    
    #TV_ON_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#TV_ON_exit;
        this.#currentEventHandlers[TvRemoteSm.EventId.B1_LONG_PRESS] = this.#TV_ON_b1_long_press;
        
        // TV_ON behavior
        // uml: enter / { show("TV ON"); }
        {
            // Step 1: execute action `show("TV ON");`
            console.log("TV ON");
        } // end of behavior for TV_ON
    }
    
    #TV_ON_exit()
    {
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#ROOT_exit;
        this.#currentEventHandlers[TvRemoteSm.EventId.B1_LONG_PRESS] = null;  // no ancestor listens to this event
    }
    
    #TV_ON_b1_long_press()
    {
        // No ancestor state handles `b1_long_press` event.
        
        // TV_ON behavior
        // uml: B1_LONG_PRESS TransitionTo(TV_OFF)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.#exitUpToStateHandler(this.#ROOT_exit);
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `TV_OFF`.
            this.#TV_OFF_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = TvRemoteSm.StateId.TV_OFF;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for TV_ON
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state BRIGHTNESS_CHANGE
    ////////////////////////////////////////////////////////////////////////////////
    
    #BRIGHTNESS_CHANGE_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#BRIGHTNESS_CHANGE_exit;
        this.#currentEventHandlers[TvRemoteSm.EventId.B2_LONG_PRESS] = this.#BRIGHTNESS_CHANGE_b2_long_press;
        
        // BRIGHTNESS_CHANGE behavior
        // uml: enter / { show("Brightness Change"); }
        {
            // Step 1: execute action `show("Brightness Change");`
            console.log("Brightness Change");
        } // end of behavior for BRIGHTNESS_CHANGE
    }
    
    #BRIGHTNESS_CHANGE_exit()
    {
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#TV_ON_exit;
        this.#currentEventHandlers[TvRemoteSm.EventId.B2_LONG_PRESS] = null;  // no ancestor listens to this event
    }
    
    #BRIGHTNESS_CHANGE_b2_long_press()
    {
        // No ancestor state handles `b2_long_press` event.
        
        // BRIGHTNESS_CHANGE behavior
        // uml: B2_LONG_PRESS TransitionTo(VOLUME_CHANGE)
        {
            // Step 1: Exit states until we reach `TV_ON` state (Least Common Ancestor for transition).
            this.#exitUpToStateHandler(this.#TV_ON_exit);
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `VOLUME_CHANGE`.
            this.#VOLUME_CHANGE_enter();
            
            // Finish transition by calling pseudo state transition function.
            this.#VOLUME_CHANGE_InitialState_transition();
            return; // event processing immediately stops when a transition finishes. No other behaviors for this state are checked.
        } // end of behavior for BRIGHTNESS_CHANGE
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state BRIGHTNESS_CHANGE__INITIAL
    ////////////////////////////////////////////////////////////////////////////////
    
    #BRIGHTNESS_CHANGE__INITIAL_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#BRIGHTNESS_CHANGE__INITIAL_exit;
        this.#currentEventHandlers[TvRemoteSm.EventId.B1_PRESS] = this.#BRIGHTNESS_CHANGE__INITIAL_b1_press;
        this.#currentEventHandlers[TvRemoteSm.EventId.B2_PRESS] = this.#BRIGHTNESS_CHANGE__INITIAL_b2_press;
    }
    
    #BRIGHTNESS_CHANGE__INITIAL_exit()
    {
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#BRIGHTNESS_CHANGE_exit;
        this.#currentEventHandlers[TvRemoteSm.EventId.B1_PRESS] = null;  // no ancestor listens to this event
        this.#currentEventHandlers[TvRemoteSm.EventId.B2_PRESS] = null;  // no ancestor listens to this event
    }
    
    #BRIGHTNESS_CHANGE__INITIAL_b1_press()
    {
        // No ancestor state handles `b1_press` event.
        
        // BRIGHTNESS_CHANGE__INITIAL behavior
        // uml: B1_PRESS TransitionTo(BRIGHTNESS_UP)
        {
            // Step 1: Exit states until we reach `BRIGHTNESS_CHANGE` state (Least Common Ancestor for transition).
            this.#BRIGHTNESS_CHANGE__INITIAL_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `BRIGHTNESS_UP`.
            this.#BRIGHTNESS_UP_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = TvRemoteSm.StateId.BRIGHTNESS_UP;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for BRIGHTNESS_CHANGE__INITIAL
    }
    
    #BRIGHTNESS_CHANGE__INITIAL_b2_press()
    {
        // No ancestor state handles `b2_press` event.
        
        // BRIGHTNESS_CHANGE__INITIAL behavior
        // uml: B2_PRESS TransitionTo(BRIGHTNESS_DOWN)
        {
            // Step 1: Exit states until we reach `BRIGHTNESS_CHANGE` state (Least Common Ancestor for transition).
            this.#BRIGHTNESS_CHANGE__INITIAL_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `BRIGHTNESS_DOWN`.
            this.#BRIGHTNESS_DOWN_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = TvRemoteSm.StateId.BRIGHTNESS_DOWN;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for BRIGHTNESS_CHANGE__INITIAL
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state BRIGHTNESS_DOWN
    ////////////////////////////////////////////////////////////////////////////////
    
    #BRIGHTNESS_DOWN_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#BRIGHTNESS_DOWN_exit;
        this.#currentEventHandlers[TvRemoteSm.EventId.B1_PRESS] = this.#BRIGHTNESS_DOWN_b1_press;
        this.#currentEventHandlers[TvRemoteSm.EventId.B2_PRESS] = this.#BRIGHTNESS_DOWN_b2_press;
        
        // BRIGHTNESS_DOWN behavior
        // uml: enter / { show("Brightness Down");\nbrightness_decrement();\nprint_brightness(); }
        {
            // Step 1: execute action `show("Brightness Down");\nbrightness_decrement();\nprint_brightness();`
            console.log("Brightness Down");
            if (this.vars.brightness > MIN_BRIGHTNESS) { this.vars.brightness--; };
            console.log(this.vars.brightness);
        } // end of behavior for BRIGHTNESS_DOWN
    }
    
    #BRIGHTNESS_DOWN_exit()
    {
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#BRIGHTNESS_CHANGE_exit;
        this.#currentEventHandlers[TvRemoteSm.EventId.B1_PRESS] = null;  // no ancestor listens to this event
        this.#currentEventHandlers[TvRemoteSm.EventId.B2_PRESS] = null;  // no ancestor listens to this event
    }
    
    #BRIGHTNESS_DOWN_b1_press()
    {
        // No ancestor state handles `b1_press` event.
        
        // BRIGHTNESS_DOWN behavior
        // uml: B1_PRESS TransitionTo(BRIGHTNESS_UP)
        {
            // Step 1: Exit states until we reach `BRIGHTNESS_CHANGE` state (Least Common Ancestor for transition).
            this.#BRIGHTNESS_DOWN_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `BRIGHTNESS_UP`.
            this.#BRIGHTNESS_UP_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = TvRemoteSm.StateId.BRIGHTNESS_UP;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for BRIGHTNESS_DOWN
    }
    
    #BRIGHTNESS_DOWN_b2_press()
    {
        // No ancestor state handles `b2_press` event.
        
        // BRIGHTNESS_DOWN behavior
        // uml: B2_PRESS TransitionTo(BRIGHTNESS_DOWN)
        {
            // Step 1: Exit states until we reach `BRIGHTNESS_CHANGE` state (Least Common Ancestor for transition).
            this.#BRIGHTNESS_DOWN_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `BRIGHTNESS_DOWN`.
            this.#BRIGHTNESS_DOWN_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = TvRemoteSm.StateId.BRIGHTNESS_DOWN;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for BRIGHTNESS_DOWN
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state BRIGHTNESS_UP
    ////////////////////////////////////////////////////////////////////////////////
    
    #BRIGHTNESS_UP_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#BRIGHTNESS_UP_exit;
        this.#currentEventHandlers[TvRemoteSm.EventId.B1_PRESS] = this.#BRIGHTNESS_UP_b1_press;
        this.#currentEventHandlers[TvRemoteSm.EventId.B2_PRESS] = this.#BRIGHTNESS_UP_b2_press;
        
        // BRIGHTNESS_UP behavior
        // uml: enter / { show("Brightness Up");\nbrightness_increment();\nprint_brightness(); }
        {
            // Step 1: execute action `show("Brightness Up");\nbrightness_increment();\nprint_brightness();`
            console.log("Brightness Up");
            if (this.vars.brightness < MAX_BRIGHTNESS) { this.vars.brightness++; };
            console.log(this.vars.brightness);
        } // end of behavior for BRIGHTNESS_UP
    }
    
    #BRIGHTNESS_UP_exit()
    {
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#BRIGHTNESS_CHANGE_exit;
        this.#currentEventHandlers[TvRemoteSm.EventId.B1_PRESS] = null;  // no ancestor listens to this event
        this.#currentEventHandlers[TvRemoteSm.EventId.B2_PRESS] = null;  // no ancestor listens to this event
    }
    
    #BRIGHTNESS_UP_b1_press()
    {
        // No ancestor state handles `b1_press` event.
        
        // BRIGHTNESS_UP behavior
        // uml: B1_PRESS TransitionTo(BRIGHTNESS_UP)
        {
            // Step 1: Exit states until we reach `BRIGHTNESS_CHANGE` state (Least Common Ancestor for transition).
            this.#BRIGHTNESS_UP_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `BRIGHTNESS_UP`.
            this.#BRIGHTNESS_UP_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = TvRemoteSm.StateId.BRIGHTNESS_UP;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for BRIGHTNESS_UP
    }
    
    #BRIGHTNESS_UP_b2_press()
    {
        // No ancestor state handles `b2_press` event.
        
        // BRIGHTNESS_UP behavior
        // uml: B2_PRESS TransitionTo(BRIGHTNESS_DOWN)
        {
            // Step 1: Exit states until we reach `BRIGHTNESS_CHANGE` state (Least Common Ancestor for transition).
            this.#BRIGHTNESS_UP_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `BRIGHTNESS_DOWN`.
            this.#BRIGHTNESS_DOWN_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = TvRemoteSm.StateId.BRIGHTNESS_DOWN;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for BRIGHTNESS_UP
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state CHANNEL_SELECT
    ////////////////////////////////////////////////////////////////////////////////
    
    #CHANNEL_SELECT_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#CHANNEL_SELECT_exit;
        this.#currentEventHandlers[TvRemoteSm.EventId.B2_LONG_PRESS] = this.#CHANNEL_SELECT_b2_long_press;
        
        // CHANNEL_SELECT behavior
        // uml: enter / { show("Channel Select"); }
        {
            // Step 1: execute action `show("Channel Select");`
            console.log("Channel Select");
        } // end of behavior for CHANNEL_SELECT
    }
    
    #CHANNEL_SELECT_exit()
    {
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#TV_ON_exit;
        this.#currentEventHandlers[TvRemoteSm.EventId.B2_LONG_PRESS] = null;  // no ancestor listens to this event
    }
    
    #CHANNEL_SELECT_b2_long_press()
    {
        // No ancestor state handles `b2_long_press` event.
        
        // CHANNEL_SELECT behavior
        // uml: B2_LONG_PRESS TransitionTo(BRIGHTNESS_CHANGE)
        {
            // Step 1: Exit states until we reach `TV_ON` state (Least Common Ancestor for transition).
            this.#exitUpToStateHandler(this.#TV_ON_exit);
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `BRIGHTNESS_CHANGE`.
            this.#BRIGHTNESS_CHANGE_enter();
            
            // BRIGHTNESS_CHANGE.<InitialState> behavior
            // uml: TransitionTo(BRIGHTNESS_CHANGE__INITIAL)
            {
                // Step 1: Exit states until we reach `BRIGHTNESS_CHANGE` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: ``.
                
                // Step 3: Enter/move towards transition target `BRIGHTNESS_CHANGE__INITIAL`.
                this.#BRIGHTNESS_CHANGE__INITIAL_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                this.stateId = TvRemoteSm.StateId.BRIGHTNESS_CHANGE__INITIAL;
                // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
                return;
            } // end of behavior for BRIGHTNESS_CHANGE.<InitialState>
        } // end of behavior for CHANNEL_SELECT
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state CHANNEL_DOWN
    ////////////////////////////////////////////////////////////////////////////////
    
    #CHANNEL_DOWN_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#CHANNEL_DOWN_exit;
        this.#currentEventHandlers[TvRemoteSm.EventId.B1_PRESS] = this.#CHANNEL_DOWN_b1_press;
        this.#currentEventHandlers[TvRemoteSm.EventId.B2_PRESS] = this.#CHANNEL_DOWN_b2_press;
        
        // CHANNEL_DOWN behavior
        // uml: enter / { show("Channel Down");\nchannel_decrement();\nprint_channel(); }
        {
            // Step 1: execute action `show("Channel Down");\nchannel_decrement();\nprint_channel();`
            console.log("Channel Down");
            this.vars.channel--; if (this.vars.channel < MIN_CHANNEL) { this.vars.channel = MAX_CHANNEL; };
            console.log(this.vars.channel);
        } // end of behavior for CHANNEL_DOWN
    }
    
    #CHANNEL_DOWN_exit()
    {
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#CHANNEL_SELECT_exit;
        this.#currentEventHandlers[TvRemoteSm.EventId.B1_PRESS] = null;  // no ancestor listens to this event
        this.#currentEventHandlers[TvRemoteSm.EventId.B2_PRESS] = null;  // no ancestor listens to this event
    }
    
    #CHANNEL_DOWN_b1_press()
    {
        // No ancestor state handles `b1_press` event.
        
        // CHANNEL_DOWN behavior
        // uml: B1_PRESS TransitionTo(CHANNEL_UP)
        {
            // Step 1: Exit states until we reach `CHANNEL_SELECT` state (Least Common Ancestor for transition).
            this.#CHANNEL_DOWN_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `CHANNEL_UP`.
            this.#CHANNEL_UP_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = TvRemoteSm.StateId.CHANNEL_UP;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for CHANNEL_DOWN
    }
    
    #CHANNEL_DOWN_b2_press()
    {
        // No ancestor state handles `b2_press` event.
        
        // CHANNEL_DOWN behavior
        // uml: B2_PRESS TransitionTo(CHANNEL_DOWN)
        {
            // Step 1: Exit states until we reach `CHANNEL_SELECT` state (Least Common Ancestor for transition).
            this.#CHANNEL_DOWN_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `CHANNEL_DOWN`.
            this.#CHANNEL_DOWN_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = TvRemoteSm.StateId.CHANNEL_DOWN;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for CHANNEL_DOWN
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state CHANNEL_SELECT__INITIAL
    ////////////////////////////////////////////////////////////////////////////////
    
    #CHANNEL_SELECT__INITIAL_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#CHANNEL_SELECT__INITIAL_exit;
        this.#currentEventHandlers[TvRemoteSm.EventId.B1_PRESS] = this.#CHANNEL_SELECT__INITIAL_b1_press;
        this.#currentEventHandlers[TvRemoteSm.EventId.B2_PRESS] = this.#CHANNEL_SELECT__INITIAL_b2_press;
    }
    
    #CHANNEL_SELECT__INITIAL_exit()
    {
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#CHANNEL_SELECT_exit;
        this.#currentEventHandlers[TvRemoteSm.EventId.B1_PRESS] = null;  // no ancestor listens to this event
        this.#currentEventHandlers[TvRemoteSm.EventId.B2_PRESS] = null;  // no ancestor listens to this event
    }
    
    #CHANNEL_SELECT__INITIAL_b1_press()
    {
        // No ancestor state handles `b1_press` event.
        
        // CHANNEL_SELECT__INITIAL behavior
        // uml: B1_PRESS TransitionTo(CHANNEL_UP)
        {
            // Step 1: Exit states until we reach `CHANNEL_SELECT` state (Least Common Ancestor for transition).
            this.#CHANNEL_SELECT__INITIAL_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `CHANNEL_UP`.
            this.#CHANNEL_UP_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = TvRemoteSm.StateId.CHANNEL_UP;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for CHANNEL_SELECT__INITIAL
    }
    
    #CHANNEL_SELECT__INITIAL_b2_press()
    {
        // No ancestor state handles `b2_press` event.
        
        // CHANNEL_SELECT__INITIAL behavior
        // uml: B2_PRESS TransitionTo(CHANNEL_DOWN)
        {
            // Step 1: Exit states until we reach `CHANNEL_SELECT` state (Least Common Ancestor for transition).
            this.#CHANNEL_SELECT__INITIAL_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `CHANNEL_DOWN`.
            this.#CHANNEL_DOWN_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = TvRemoteSm.StateId.CHANNEL_DOWN;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for CHANNEL_SELECT__INITIAL
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state CHANNEL_UP
    ////////////////////////////////////////////////////////////////////////////////
    
    #CHANNEL_UP_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#CHANNEL_UP_exit;
        this.#currentEventHandlers[TvRemoteSm.EventId.B1_PRESS] = this.#CHANNEL_UP_b1_press;
        this.#currentEventHandlers[TvRemoteSm.EventId.B2_PRESS] = this.#CHANNEL_UP_b2_press;
        
        // CHANNEL_UP behavior
        // uml: enter / { show("Channel Up");\nchannel_increment();\nprint_channel(); }
        {
            // Step 1: execute action `show("Channel Up");\nchannel_increment();\nprint_channel();`
            console.log("Channel Up");
            this.vars.channel++; if (this.vars.channel > MAX_CHANNEL) { this.vars.channel = MIN_CHANNEL; };
            console.log(this.vars.channel);
        } // end of behavior for CHANNEL_UP
    }
    
    #CHANNEL_UP_exit()
    {
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#CHANNEL_SELECT_exit;
        this.#currentEventHandlers[TvRemoteSm.EventId.B1_PRESS] = null;  // no ancestor listens to this event
        this.#currentEventHandlers[TvRemoteSm.EventId.B2_PRESS] = null;  // no ancestor listens to this event
    }
    
    #CHANNEL_UP_b1_press()
    {
        // No ancestor state handles `b1_press` event.
        
        // CHANNEL_UP behavior
        // uml: B1_PRESS TransitionTo(CHANNEL_UP)
        {
            // Step 1: Exit states until we reach `CHANNEL_SELECT` state (Least Common Ancestor for transition).
            this.#CHANNEL_UP_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `CHANNEL_UP`.
            this.#CHANNEL_UP_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = TvRemoteSm.StateId.CHANNEL_UP;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for CHANNEL_UP
    }
    
    #CHANNEL_UP_b2_press()
    {
        // No ancestor state handles `b2_press` event.
        
        // CHANNEL_UP behavior
        // uml: B2_PRESS TransitionTo(CHANNEL_DOWN)
        {
            // Step 1: Exit states until we reach `CHANNEL_SELECT` state (Least Common Ancestor for transition).
            this.#CHANNEL_UP_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `CHANNEL_DOWN`.
            this.#CHANNEL_DOWN_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = TvRemoteSm.StateId.CHANNEL_DOWN;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for CHANNEL_UP
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state VOLUME_CHANGE
    ////////////////////////////////////////////////////////////////////////////////
    
    #VOLUME_CHANGE_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#VOLUME_CHANGE_exit;
        this.#currentEventHandlers[TvRemoteSm.EventId.B2_LONG_PRESS] = this.#VOLUME_CHANGE_b2_long_press;
        
        // VOLUME_CHANGE behavior
        // uml: enter / { show("Volume Change"); }
        {
            // Step 1: execute action `show("Volume Change");`
            console.log("Volume Change");
        } // end of behavior for VOLUME_CHANGE
    }
    
    #VOLUME_CHANGE_exit()
    {
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#TV_ON_exit;
        this.#currentEventHandlers[TvRemoteSm.EventId.B2_LONG_PRESS] = null;  // no ancestor listens to this event
    }
    
    #VOLUME_CHANGE_b2_long_press()
    {
        // No ancestor state handles `b2_long_press` event.
        
        // VOLUME_CHANGE behavior
        // uml: B2_LONG_PRESS TransitionTo(CHANNEL_SELECT)
        {
            // Step 1: Exit states until we reach `TV_ON` state (Least Common Ancestor for transition).
            this.#exitUpToStateHandler(this.#TV_ON_exit);
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `CHANNEL_SELECT`.
            this.#CHANNEL_SELECT_enter();
            
            // CHANNEL_SELECT.<InitialState> behavior
            // uml: TransitionTo(CHANNEL_SELECT__INITIAL)
            {
                // Step 1: Exit states until we reach `CHANNEL_SELECT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: ``.
                
                // Step 3: Enter/move towards transition target `CHANNEL_SELECT__INITIAL`.
                this.#CHANNEL_SELECT__INITIAL_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                this.stateId = TvRemoteSm.StateId.CHANNEL_SELECT__INITIAL;
                // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
                return;
            } // end of behavior for CHANNEL_SELECT.<InitialState>
        } // end of behavior for VOLUME_CHANGE
    }
    
    #VOLUME_CHANGE_InitialState_transition()
    {
        // VOLUME_CHANGE.<InitialState> behavior
        // uml: TransitionTo(VOLUME_CHANGE__INITIAL)
        {
            // Step 1: Exit states until we reach `VOLUME_CHANGE` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `VOLUME_CHANGE__INITIAL`.
            this.#VOLUME_CHANGE__INITIAL_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = TvRemoteSm.StateId.VOLUME_CHANGE__INITIAL;
            this.#ancestorEventHandler = null;
            return;
        } // end of behavior for VOLUME_CHANGE.<InitialState>
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state VOLUME_CHANGE__INITIAL
    ////////////////////////////////////////////////////////////////////////////////
    
    #VOLUME_CHANGE__INITIAL_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#VOLUME_CHANGE__INITIAL_exit;
        this.#currentEventHandlers[TvRemoteSm.EventId.B1_PRESS] = this.#VOLUME_CHANGE__INITIAL_b1_press;
        this.#currentEventHandlers[TvRemoteSm.EventId.B2_PRESS] = this.#VOLUME_CHANGE__INITIAL_b2_press;
    }
    
    #VOLUME_CHANGE__INITIAL_exit()
    {
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#VOLUME_CHANGE_exit;
        this.#currentEventHandlers[TvRemoteSm.EventId.B1_PRESS] = null;  // no ancestor listens to this event
        this.#currentEventHandlers[TvRemoteSm.EventId.B2_PRESS] = null;  // no ancestor listens to this event
    }
    
    #VOLUME_CHANGE__INITIAL_b1_press()
    {
        // No ancestor state handles `b1_press` event.
        
        // VOLUME_CHANGE__INITIAL behavior
        // uml: B1_PRESS TransitionTo(VOLUME_UP)
        {
            // Step 1: Exit states until we reach `VOLUME_CHANGE` state (Least Common Ancestor for transition).
            this.#VOLUME_CHANGE__INITIAL_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `VOLUME_UP`.
            this.#VOLUME_UP_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = TvRemoteSm.StateId.VOLUME_UP;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for VOLUME_CHANGE__INITIAL
    }
    
    #VOLUME_CHANGE__INITIAL_b2_press()
    {
        // No ancestor state handles `b2_press` event.
        
        // VOLUME_CHANGE__INITIAL behavior
        // uml: B2_PRESS TransitionTo(VOLUME_DOWN)
        {
            // Step 1: Exit states until we reach `VOLUME_CHANGE` state (Least Common Ancestor for transition).
            this.#VOLUME_CHANGE__INITIAL_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `VOLUME_DOWN`.
            this.#VOLUME_DOWN_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = TvRemoteSm.StateId.VOLUME_DOWN;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for VOLUME_CHANGE__INITIAL
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state VOLUME_DOWN
    ////////////////////////////////////////////////////////////////////////////////
    
    #VOLUME_DOWN_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#VOLUME_DOWN_exit;
        this.#currentEventHandlers[TvRemoteSm.EventId.B1_PRESS] = this.#VOLUME_DOWN_b1_press;
        this.#currentEventHandlers[TvRemoteSm.EventId.B2_PRESS] = this.#VOLUME_DOWN_b2_press;
        
        // VOLUME_DOWN behavior
        // uml: enter / { show("Volume Down");\nvolume_decrement();\nprint_volume() }
        {
            // Step 1: execute action `show("Volume Down");\nvolume_decrement();\nprint_volume()`
            console.log("Volume Down");
            if (this.vars.volume > MIN_VOLUME) { this.vars.volume--; };
            console.log(this.vars.volume)
        } // end of behavior for VOLUME_DOWN
    }
    
    #VOLUME_DOWN_exit()
    {
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#VOLUME_CHANGE_exit;
        this.#currentEventHandlers[TvRemoteSm.EventId.B1_PRESS] = null;  // no ancestor listens to this event
        this.#currentEventHandlers[TvRemoteSm.EventId.B2_PRESS] = null;  // no ancestor listens to this event
    }
    
    #VOLUME_DOWN_b1_press()
    {
        // No ancestor state handles `b1_press` event.
        
        // VOLUME_DOWN behavior
        // uml: B1_PRESS TransitionTo(VOLUME_UP)
        {
            // Step 1: Exit states until we reach `VOLUME_CHANGE` state (Least Common Ancestor for transition).
            this.#VOLUME_DOWN_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `VOLUME_UP`.
            this.#VOLUME_UP_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = TvRemoteSm.StateId.VOLUME_UP;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for VOLUME_DOWN
    }
    
    #VOLUME_DOWN_b2_press()
    {
        // No ancestor state handles `b2_press` event.
        
        // VOLUME_DOWN behavior
        // uml: B2_PRESS TransitionTo(VOLUME_DOWN)
        {
            // Step 1: Exit states until we reach `VOLUME_CHANGE` state (Least Common Ancestor for transition).
            this.#VOLUME_DOWN_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `VOLUME_DOWN`.
            this.#VOLUME_DOWN_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = TvRemoteSm.StateId.VOLUME_DOWN;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for VOLUME_DOWN
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state VOLUME_UP
    ////////////////////////////////////////////////////////////////////////////////
    
    #VOLUME_UP_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#VOLUME_UP_exit;
        this.#currentEventHandlers[TvRemoteSm.EventId.B1_PRESS] = this.#VOLUME_UP_b1_press;
        this.#currentEventHandlers[TvRemoteSm.EventId.B2_PRESS] = this.#VOLUME_UP_b2_press;
        
        // VOLUME_UP behavior
        // uml: enter / { show("Volume Up");\nvolume_increment();\nprint_volume(); }
        {
            // Step 1: execute action `show("Volume Up");\nvolume_increment();\nprint_volume();`
            console.log("Volume Up");
            if (this.vars.volume < MAX_VOLUME) { this.vars.volume++; };
            console.log(this.vars.volume);
        } // end of behavior for VOLUME_UP
    }
    
    #VOLUME_UP_exit()
    {
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#VOLUME_CHANGE_exit;
        this.#currentEventHandlers[TvRemoteSm.EventId.B1_PRESS] = null;  // no ancestor listens to this event
        this.#currentEventHandlers[TvRemoteSm.EventId.B2_PRESS] = null;  // no ancestor listens to this event
    }
    
    #VOLUME_UP_b1_press()
    {
        // No ancestor state handles `b1_press` event.
        
        // VOLUME_UP behavior
        // uml: B1_PRESS TransitionTo(VOLUME_UP)
        {
            // Step 1: Exit states until we reach `VOLUME_CHANGE` state (Least Common Ancestor for transition).
            this.#VOLUME_UP_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `VOLUME_UP`.
            this.#VOLUME_UP_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = TvRemoteSm.StateId.VOLUME_UP;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for VOLUME_UP
    }
    
    #VOLUME_UP_b2_press()
    {
        // No ancestor state handles `b2_press` event.
        
        // VOLUME_UP behavior
        // uml: B2_PRESS TransitionTo(VOLUME_DOWN)
        {
            // Step 1: Exit states until we reach `VOLUME_CHANGE` state (Least Common Ancestor for transition).
            this.#VOLUME_UP_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `VOLUME_DOWN`.
            this.#VOLUME_DOWN_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = TvRemoteSm.StateId.VOLUME_DOWN;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for VOLUME_UP
    }
    
    // Thread safe.
    static stateIdToString(id)
    {
        switch (id)
        {
            case TvRemoteSm.StateId.ROOT: return "ROOT";
            case TvRemoteSm.StateId.TV_OFF: return "TV_OFF";
            case TvRemoteSm.StateId.TV_ON: return "TV_ON";
            case TvRemoteSm.StateId.BRIGHTNESS_CHANGE: return "BRIGHTNESS_CHANGE";
            case TvRemoteSm.StateId.BRIGHTNESS_CHANGE__INITIAL: return "BRIGHTNESS_CHANGE__INITIAL";
            case TvRemoteSm.StateId.BRIGHTNESS_DOWN: return "BRIGHTNESS_DOWN";
            case TvRemoteSm.StateId.BRIGHTNESS_UP: return "BRIGHTNESS_UP";
            case TvRemoteSm.StateId.CHANNEL_SELECT: return "CHANNEL_SELECT";
            case TvRemoteSm.StateId.CHANNEL_DOWN: return "CHANNEL_DOWN";
            case TvRemoteSm.StateId.CHANNEL_SELECT__INITIAL: return "CHANNEL_SELECT__INITIAL";
            case TvRemoteSm.StateId.CHANNEL_UP: return "CHANNEL_UP";
            case TvRemoteSm.StateId.VOLUME_CHANGE: return "VOLUME_CHANGE";
            case TvRemoteSm.StateId.VOLUME_CHANGE__INITIAL: return "VOLUME_CHANGE__INITIAL";
            case TvRemoteSm.StateId.VOLUME_DOWN: return "VOLUME_DOWN";
            case TvRemoteSm.StateId.VOLUME_UP: return "VOLUME_UP";
            default: return "?";
        }
    }
    
    // Thread safe.
    static eventIdToString(id)
    {
        switch (id)
        {
            case TvRemoteSm.EventId.B1_LONG_PRESS: return "B1_LONG_PRESS";
            case TvRemoteSm.EventId.B1_PRESS: return "B1_PRESS";
            case TvRemoteSm.EventId.B2_LONG_PRESS: return "B2_LONG_PRESS";
            case TvRemoteSm.EventId.B2_PRESS: return "B2_PRESS";
            default: return "?";
        }
    }
}
